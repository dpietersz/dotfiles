#!/bin/bash
# Niri Monitor Handler
# Automatically adjusts monitor positioning when displays connect/disconnect
# This script monitors output changes and updates eDP-1 position when LG monitor disconnects
#
# Usage: niri-monitor-handler
# Should be run at startup or as a systemd user service

set -euo pipefail

# Configuration
NIRI_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/niri"
NIRI_CONFIG="$NIRI_CONFIG_DIR/config.kdl"
TEMP_CONFIG="/tmp/niri-config-temp.kdl"
LOG_FILE="${XDG_RUNTIME_DIR:-/tmp}/niri-monitor-handler.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $*" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*" | tee -a "$LOG_FILE"
}

# Check if LG monitor is connected
is_lg_connected() {
    niri msg outputs 2>/dev/null | grep -q "LG Electronics LG HDR WQHD"
}

# Check if eDP-1 is connected
is_edp1_connected() {
    niri msg outputs 2>/dev/null | grep -q "eDP-1"
}

# Get current eDP-1 position from config
get_edp1_position() {
    grep -A 5 'output "eDP-1"' "$NIRI_CONFIG" | grep "position" | sed 's/.*position //' | tr -d ' '
}

# Update eDP-1 position in config
update_edp1_position() {
    local new_position="$1"
    
    log_info "Updating eDP-1 position to: $new_position"
    
    # Create temporary config with updated position
    cp "$NIRI_CONFIG" "$TEMP_CONFIG"
    
    # Use sed to replace the position line for eDP-1
    # This is a bit tricky because we need to match the right output block
    sed -i "/output \"eDP-1\"/,/^}/ s/position x=[0-9]* y=[0-9]*/position $new_position/" "$TEMP_CONFIG"
    
    # Verify the change was made
    if grep -q "position $new_position" "$TEMP_CONFIG"; then
        mv "$TEMP_CONFIG" "$NIRI_CONFIG"
        log_success "eDP-1 position updated to: $new_position"
        
        # Reload Niri config
        if command -v niri &>/dev/null; then
            niri msg action reload-config 2>/dev/null || {
                log_warning "Could not reload Niri config via IPC, trying SIGHUP"
                pkill -HUP niri || true
            }
        fi
        return 0
    else
        log_error "Failed to update position in config"
        rm -f "$TEMP_CONFIG"
        return 1
    fi
}

# Main monitoring loop
monitor_displays() {
    local last_lg_state=""
    local last_edp1_position=""
    
    log_info "Starting Niri monitor handler"
    log_info "Monitoring display changes..."
    
    while true; do
        # Check current state
        local lg_connected="false"
        local edp1_connected="false"
        
        if is_lg_connected; then
            lg_connected="true"
        fi
        
        if is_edp1_connected; then
            edp1_connected="true"
        fi
        
        # Get current eDP-1 position
        local current_position=""
        if [ "$edp1_connected" = "true" ]; then
            current_position=$(get_edp1_position)
        fi
        
        # Detect state change
        if [ "$lg_connected" != "$last_lg_state" ]; then
            log_info "Display state changed: LG=$lg_connected, eDP-1=$edp1_connected"
            
            if [ "$lg_connected" = "false" ] && [ "$edp1_connected" = "true" ]; then
                # LG disconnected, only eDP-1 is active
                log_warning "LG monitor disconnected! Only eDP-1 is active"
                
                # Check if position needs to be updated
                if [ "$current_position" != "x=0y=0" ] && [ "$current_position" != "x=0 y=0" ]; then
                    log_info "eDP-1 is off-screen at position: $current_position"
                    update_edp1_position "x=0 y=0"
                fi
            elif [ "$lg_connected" = "true" ] && [ "$edp1_connected" = "true" ]; then
                # LG connected, both displays active
                log_success "LG monitor connected! Both displays active"
                log_info "eDP-1 position: $current_position"
            fi
            
            last_lg_state="$lg_connected"
        fi
        
        # Sleep before next check (5 seconds)
        sleep 5
    done
}

# Trap signals for graceful shutdown
trap 'log_info "Shutting down monitor handler"; exit 0' SIGTERM SIGINT

# Start monitoring
monitor_displays
