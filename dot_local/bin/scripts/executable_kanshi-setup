#!/bin/bash
# Helper script to configure Kanshi profiles
# This script helps you find monitor names and update Kanshi configuration

set -euo pipefail

KANSHI_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/kanshi/config"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Function to list all connected monitors
list_monitors() {
    print_header "Connected Monitors"
    
    if ! command -v niri &> /dev/null; then
        print_error "Niri is not running or not in PATH"
        return 1
    fi
    
    niri msg outputs
}

# Function to find portable monitor
find_portable_monitor() {
    print_header "Finding Portable Monitor"
    
    if ! command -v niri &> /dev/null; then
        print_error "Niri is not running or not in PATH"
        return 1
    fi
    
    # Get all outputs and filter out known ones
    local outputs=$(niri msg outputs | grep "^Output" | awk '{print $2}' | sed 's/"//g')
    local known_monitors=("BOE 0x06DD Unknown" "LG Electronics LG HDR WQHD 107NTNH4K559")
    
    echo "Known monitors:"
    for monitor in "${known_monitors[@]}"; do
        echo "  - $monitor"
    done
    echo ""
    echo "All connected monitors:"
    echo "$outputs" | while read -r output; do
        echo "  - $output"
    done
    echo ""
    
    # Find unknown monitors
    local unknown_found=false
    echo "$outputs" | while read -r output; do
        local is_known=false
        for known in "${known_monitors[@]}"; do
            if [[ "$output" == "$known" ]]; then
                is_known=true
                break
            fi
        done
        
        if [[ "$is_known" == false ]]; then
            print_success "Found portable monitor: $output"
            unknown_found=true
        fi
    done
    
    if [[ "$unknown_found" == false ]]; then
        print_warning "No unknown monitors found. Is your portable monitor connected?"
    fi
}

# Function to update portable monitor name in config
update_portable_monitor() {
    local new_name="$1"
    
    if [[ ! -f "$KANSHI_CONFIG" ]]; then
        print_error "Kanshi config not found at $KANSHI_CONFIG"
        return 1
    fi
    
    print_header "Updating Portable Monitor Name"
    echo "Old name: PORTABLE_MONITOR_NAME"
    echo "New name: $new_name"
    
    # Create backup
    cp "$KANSHI_CONFIG" "${KANSHI_CONFIG}.backup"
    print_success "Created backup at ${KANSHI_CONFIG}.backup"
    
    # Replace the placeholder
    sed -i "s/PORTABLE_MONITOR_NAME/$new_name/g" "$KANSHI_CONFIG"
    
    print_success "Updated Kanshi configuration"
    
    # Reload Kanshi
    if pgrep -x kanshi > /dev/null; then
        killall -HUP kanshi
        print_success "Reloaded Kanshi daemon"
    else
        print_warning "Kanshi is not running. Start it with: systemctl --user start kanshi"
    fi
}

# Function to show current configuration
show_config() {
    print_header "Current Kanshi Configuration"
    
    if [[ ! -f "$KANSHI_CONFIG" ]]; then
        print_error "Kanshi config not found at $KANSHI_CONFIG"
        return 1
    fi
    
    cat "$KANSHI_CONFIG"
}

# Function to validate configuration
validate_config() {
    print_header "Validating Kanshi Configuration"
    
    if [[ ! -f "$KANSHI_CONFIG" ]]; then
        print_error "Kanshi config not found at $KANSHI_CONFIG"
        return 1
    fi
    
    # Check for syntax errors (basic check)
    if grep -q "PORTABLE_MONITOR_NAME" "$KANSHI_CONFIG"; then
        print_warning "Portable monitor placeholder still in config"
        echo "Run: kanshi-setup update <monitor-name>"
    else
        print_success "No placeholder names found"
    fi
    
    # Check if Kanshi is running
    if pgrep -x kanshi > /dev/null; then
        print_success "Kanshi daemon is running"
    else
        print_warning "Kanshi daemon is not running"
        echo "Start it with: systemctl --user start kanshi"
    fi
}

# Function to show help
show_help() {
    cat << EOF
${BLUE}Kanshi Setup Helper${NC}

Usage: kanshi-setup <command>

Commands:
  list              List all connected monitors
  find              Find portable monitor output name
  update <name>     Update portable monitor name in config
  show              Show current Kanshi configuration
  validate          Validate Kanshi configuration
  help              Show this help message

Examples:
  kanshi-setup list
  kanshi-setup find
  kanshi-setup update "ASUS PA148CTC"
  kanshi-setup show
  kanshi-setup validate

Configuration file: $KANSHI_CONFIG
EOF
}

# Main script logic
main() {
    local command="${1:-help}"
    
    case "$command" in
        list)
            list_monitors
            ;;
        find)
            find_portable_monitor
            ;;
        update)
            if [[ -z "${2:-}" ]]; then
                print_error "Please provide monitor name"
                echo "Usage: kanshi-setup update <monitor-name>"
                return 1
            fi
            update_portable_monitor "$2"
            ;;
        show)
            show_config
            ;;
        validate)
            validate_config
            ;;
        help)
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            show_help
            return 1
            ;;
    esac
}

main "$@"
