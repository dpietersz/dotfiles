#!/usr/bin/env bash
# gpg-fix ‚Äî reset/repair common GPG & pass issues safely
# Usage: gpg-fix [--hard] [--no-systemd] [--verbose]

set -euo pipefail

HARD=0
USE_SYSTEMD=1
VERBOSE=0

# ‚úÖ Correct arg loop: skips entirely when there are no args
for arg in "$@"; do
  case "$arg" in
    --hard) HARD=1 ;;
    --no-systemd) USE_SYSTEMD=0 ;;
    --verbose|-v) VERBOSE=$((VERBOSE+1)) ;;
    -h|--help)
      cat <<'USAGE'
gpg-fix ‚Äî reset/repair common GPG & pass issues
Usage: gpg-fix [--hard] [--no-systemd] [--verbose]
  --hard        Also SIGKILL lingering gpg* processes if needed
  --no-systemd  Skip user systemd actions even if available
  -v, --verbose Increase logging (repeatable)
USAGE
      exit 0
      ;;
    *) echo "Unknown arg: $arg" >&2; exit 2 ;;
  esac
done

log() { printf "%s\n" "$*"; }
vlog() { [[ $VERBOSE -gt 0 ]] && printf "%s\n" "$*"; }
die() { printf "‚ùå %s\n" "$*" >&2; exit 1; }

require() { command -v "$1" >/dev/null 2>&1 || die "Missing dependency: $1"; }
require gpg
require gpgconf
command -v gpg-connect-agent >/dev/null 2>&1 || die "Missing dependency: gpg-connect-agent"

TTY_DEV="$(tty || true)"
SYSTEMD_USER_OK=0
if [[ ${USE_SYSTEMD} -eq 1 ]] && command -v systemctl >/dev/null 2>&1; then
  if systemctl --user show-environment >/dev/null 2>&1; then
    SYSTEMD_USER_OK=1
  fi
fi

HOMEDIR="${GNUPGHOME:-$HOME/.gnupg}"
[[ -d "$HOMEDIR" ]] || die "GnuPG home not found at $HOMEDIR"

log "üîé Diagnosing..."
vlog "  GNUPGHOME=$HOMEDIR"
vlog "  systemd-user=${SYSTEMD_USER_OK}"
vlog "  gpg version: $(gpg --version | head -n1)"

if [[ -n "${TTY_DEV:-}" ]]; then
  export GPG_TTY="$TTY_DEV"
  vlog "  Set GPG_TTY=$GPG_TTY"
fi
gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1 || true

log "üõë Stopping GnuPG background services..."
gpgconf --kill all || true
if [[ $SYSTEMD_USER_OK -eq 1 ]]; then
  systemctl --user stop --quiet gpg-agent.socket gpg-agent.service dirmngr.service scdaemon.service keyboxd.service || true
fi

if [[ $HARD -eq 1 ]]; then
  log "‚ö†Ô∏è  --hard enabled: killing lingering gpg* processes"
  pkill -9 -u "$USER" -f '/gpg(-agent)?(\s|$)' 2>/dev/null || true
  pkill -9 -u "$USER" -f dirmngr 2>/dev/null || true
  pkill -9 -u "$USER" -f scdaemon 2>/dev/null || true
  pkill -9 -u "$USER" -f keyboxd 2>/dev/null || true
fi

log "üßπ Cleaning stale locks and sockets..."
find "$HOMEDIR" -maxdepth 2 -type f -name '*.lock' -print -delete 2>/dev/null || true
for s in S.gpg-agent S.gpg-agent.*; do
  if [[ -e "$HOMEDIR/$s" && ! -S "$HOMEDIR/$s" ]]; then
    rm -f "$HOMEDIR/$s" || true
  elif [[ -S "$HOMEDIR/$s" ]]; then
    rm -f "$HOMEDIR/$s" || true
  fi
done

log "üîí Fixing permissions..."
chmod 700 "$HOMEDIR" 2>/dev/null || true
[[ -d "$HOMEDIR/private-keys-v1.d" ]] && chmod 700 "$HOMEDIR/private-keys-v1.d" 2>/dev/null || true
while IFS= read -r -d '' p; do
  if [[ -d "$p" ]]; then chmod 700 "$p" 2>/dev/null || true
  else chmod 600 "$p" 2>/dev/null || true
  fi
done < <(find "$HOMEDIR" -mindepth 1 -maxdepth 2 -print0 2>/dev/null || true)

# Fedora/SELinux relabel (safe no-op if SELinux tools absent)
if command -v restorecon >/dev/null 2>&1; then
  log "üßø Restoring SELinux contexts on $HOMEDIR"
  restorecon -Rv "$HOMEDIR" || true
fi

if command -v dirmngr >/dev/null 2>&1; then
  gpgconf --kill dirmngr || true
fi

log "üîÑ Starting GnuPG services..."
if [[ $SYSTEMD_USER_OK -eq 1 ]]; then
  systemctl --user start gpg-agent.socket || true
  systemctl --user start dirmngr.service || true
  systemctl --user start keyboxd.service || true 2>/dev/null || true
  systemctl --user start scdaemon.service || true 2>/dev/null || true
else
  gpgconf --launch gpg-agent || true
  gpgconf --launch dirmngr || true
  gpgconf --launch keyboxd || true 2>/dev/null || true
  gpgconf --launch scdaemon || true 2>/dev/null || true
fi

gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1 || true
gpgconf --reload gpg-agent || true

log "‚úÖ Verifying setup..."
OK=1
gpg -K >/dev/null 2>&1 || { OK=0; log "‚ö†Ô∏è  Secret key listing failed (smartcard? permissions?)."; }

PINENTRY=$(gpgconf --list-options gpg-agent 2>/dev/null | awk -F: '$1=="pinentry-program"{print $10}' || true)
[[ -n "${PINENTRY:-}" ]] && vlog "  pinentry-program: ${PINENTRY}"
if [[ -z "${GPG_TTY:-}" && -z "${DISPLAY:-}" ]]; then
  log "‚ö†Ô∏è  No GPG_TTY or DISPLAY set; pinentry might fail for passphrase prompts."
fi

if gpg --card-status >/dev/null 2>&1; then
  vlog "  Smartcard detected; nudging scdaemon."
  gpg-connect-agent "scd reset" /bye >/dev/null 2>&1 || true
fi

if command -v pass >/dev/null 2>&1; then
  pass ls >/dev/null 2>&1 || log "‚ö†Ô∏è  'pass' returned non-zero; try: pass ls -v"
fi

[[ $OK -eq 1 ]] && log "üéâ GPG reset completed."
